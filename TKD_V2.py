# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'TKD_V2.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.



import sqlite3
import cv2
import numpy as np
import qimage2ndarray as qimage2ndarray
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QImage, QPixmap
from PyQt5.QtWidgets import QFileDialog, QDialog, QApplication, QMessageBox


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1892, 990)
        MainWindow.setMinimumSize(QtCore.QSize(1000, 500))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("C:/Users/Lenovo/Desktop/logoTiDx.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setStyleSheet("background-color: rgb(45, 45, 45);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.content_bar = QtWidgets.QFrame(self.centralwidget)
        self.content_bar.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.content_bar.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.content_bar.setFrameShadow(QtWidgets.QFrame.Raised)
        self.content_bar.setObjectName("content_bar")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.content_bar)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.frame_pages = QtWidgets.QFrame(self.content_bar)
        self.frame_pages.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_pages.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_pages.setObjectName("frame_pages")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.frame_pages)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setSpacing(0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.pageswidget = QtWidgets.QStackedWidget(self.frame_pages)
        self.pageswidget.setStyleSheet("background-color: rgb(45, 45, 45);\n"
"color: rgb(255, 255, 255);")
        self.pageswidget.setFrameShape(QtWidgets.QFrame.Box)
        self.pageswidget.setFrameShadow(QtWidgets.QFrame.Raised)
        self.pageswidget.setObjectName("pageswidget")
        self.page_1 = QtWidgets.QWidget()
        self.page_1.setObjectName("page_1")
        self.label = QtWidgets.QLabel(self.page_1)
        self.label.setGeometry(QtCore.QRect(340, 0, 1261, 561))
        self.label.setStyleSheet("image: url(:/newPrefix/logoApp.png);\n"
"")
        self.label.setText("")
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.page_1)
        self.label_2.setGeometry(QtCore.QRect(810, 570, 331, 31))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.uname_lineEdit = QtWidgets.QLineEdit(self.page_1)
        self.uname_lineEdit.setGeometry(QtCore.QRect(890, 660, 211, 22))
        self.uname_lineEdit.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(0, 0, 0);")
        self.uname_lineEdit.setObjectName("uname_lineEdit")
        self.pass_lineEdit = QtWidgets.QLineEdit(self.page_1)
        self.pass_lineEdit.setGeometry(QtCore.QRect(890, 690, 211, 22))
        self.pass_lineEdit.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(0, 0, 0);")
        self.pass_lineEdit.setObjectName("pass_lineEdit")
        self.label_3 = QtWidgets.QLabel(self.page_1)
        self.label_3.setGeometry(QtCore.QRect(820, 650, 71, 31))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.page_1)
        self.label_4.setGeometry(QtCore.QRect(820, 690, 61, 21))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.page_1)
        self.label_5.setGeometry(QtCore.QRect(850, 600, 291, 41))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_5.setFont(font)
        self.label_5.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_5.setAlignment(QtCore.Qt.AlignCenter)
        self.label_5.setObjectName("label_5")
        self.btn_Signin = QtWidgets.QPushButton(self.page_1)
        self.btn_Signin.setGeometry(QtCore.QRect(890, 750, 93, 28))
        self.btn_Signin.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(0, 0, 0);")
        self.btn_Signin.setObjectName("btn_Signin")
        self.btn_Signup = QtWidgets.QPushButton(self.page_1)
        self.btn_Signup.setGeometry(QtCore.QRect(1010, 750, 93, 28))
        self.btn_Signup.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(0, 0, 0);")
        self.btn_Signup.setObjectName("btn_Signup")
        self.btn_checkB = QtWidgets.QCheckBox(self.page_1)
        self.btn_checkB.setGeometry(QtCore.QRect(1120, 690, 131, 21))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.btn_checkB.setFont(font)
        self.btn_checkB.setObjectName("btn_checkB")
        self.pageswidget.addWidget(self.page_1)
        self.page_3 = QtWidgets.QWidget()
        self.page_3.setObjectName("page_3")
        self.label_6 = QtWidgets.QLabel(self.page_3)
        self.label_6.setGeometry(QtCore.QRect(0, 40, 1851, 901))
        font = QtGui.QFont()
        font.setPointSize(30)
        font.setBold(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_6.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.page_3)
        self.label_7.setGeometry(QtCore.QRect(720, 100, 431, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setStyleSheet("color: rgb(255, 255, 0);")
        self.label_7.setAlignment(QtCore.Qt.AlignCenter)
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.page_3)
        self.label_8.setGeometry(QtCore.QRect(610, 130, 631, 71))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_8.setFont(font)
        self.label_8.setStyleSheet("color: rgb(255, 255, 0);")
        self.label_8.setAlignment(QtCore.Qt.AlignCenter)
        self.label_8.setObjectName("label_8")
        self.btn_toolE = QtWidgets.QPushButton(self.page_3)
        self.btn_toolE.setGeometry(QtCore.QRect(780, 180, 93, 28))
        self.btn_toolE.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(0, 0, 0);")
        self.btn_toolE.setObjectName("btn_toolE")
        self.btn_toolF = QtWidgets.QPushButton(self.page_3)
        self.btn_toolF.setGeometry(QtCore.QRect(980, 180, 93, 28))
        self.btn_toolF.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(0, 0, 0);")
        self.btn_toolF.setObjectName("btn_toolF")
        self.label_10 = QtWidgets.QLabel(self.page_3)
        self.label_10.setGeometry(QtCore.QRect(610, 840, 671, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_10.setFont(font)
        self.label_10.setStyleSheet("color: rgb(255, 255, 0);")
        self.label_10.setObjectName("label_10")
        self.label_9 = QtWidgets.QLabel(self.page_3)
        self.label_9.setGeometry(QtCore.QRect(550, 220, 731, 611))
        self.label_9.setStyleSheet("image: url(:/newPrefix/detectflow (1).png);")
        self.label_9.setFrameShape(QtWidgets.QFrame.Box)
        self.label_9.setFrameShadow(QtWidgets.QFrame.Raised)
        self.label_9.setLineWidth(5)
        self.label_9.setText("")
        self.label_9.setObjectName("label_9")
        self.top_bar = QtWidgets.QFrame(self.page_3)
        self.top_bar.setGeometry(QtCore.QRect(0, 0, 1881, 40))
        self.top_bar.setMaximumSize(QtCore.QSize(16777215, 40))
        self.top_bar.setStyleSheet("background-color: rgb(35, 35, 35);")
        self.top_bar.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.top_bar.setFrameShadow(QtWidgets.QFrame.Raised)
        self.top_bar.setObjectName("top_bar")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.top_bar)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setSpacing(0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.frame_top_2 = QtWidgets.QFrame(self.top_bar)
        self.frame_top_2.setMaximumSize(QtCore.QSize(16777215, 40))
        self.frame_top_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_top_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_top_2.setObjectName("frame_top_2")
        self.pushButton_5 = QtWidgets.QPushButton(self.frame_top_2)
        self.pushButton_5.setGeometry(QtCore.QRect(1840, 0, 31, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_5.sizePolicy().hasHeightForWidth())
        self.pushButton_5.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_5.setFont(font)
        self.pushButton_5.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.pushButton_5.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("logout.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_5.setIcon(icon1)
        self.pushButton_5.setIconSize(QtCore.QSize(40, 40))
        self.pushButton_5.setFlat(True)
        self.pushButton_5.setObjectName("pushButton_5")
        self.horizontalLayout_2.addWidget(self.frame_top_2)
        self.pageswidget.addWidget(self.page_3)
        self.page_4 = QtWidgets.QWidget()
        self.page_4.setObjectName("page_4")
        self.screen1 = QtWidgets.QLabel(self.page_4)
        self.screen1.setGeometry(QtCore.QRect(30, 180, 891, 441))
        font = QtGui.QFont()
        font.setPointSize(50)
        self.screen1.setFont(font)
        self.screen1.setFrameShape(QtWidgets.QFrame.Box)
        self.screen1.setFrameShadow(QtWidgets.QFrame.Raised)
        self.screen1.setLineWidth(4)
        self.screen1.setText("")
        self.screen1.setAlignment(QtCore.Qt.AlignCenter)
        self.screen1.setObjectName("screen1")
        self.btn_CD1 = QtWidgets.QPushButton(self.page_4)
        self.btn_CD1.setGeometry(QtCore.QRect(970, 650, 131, 28))
        self.btn_CD1.setStyleSheet("background-color: rgb(170, 170, 0);")
        self.btn_CD1.setObjectName("btn_CD1")
        self.screen2 = QtWidgets.QLabel(self.page_4)
        self.screen2.setGeometry(QtCore.QRect(970, 180, 881, 441))
        font = QtGui.QFont()
        font.setPointSize(50)
        self.screen2.setFont(font)
        self.screen2.setFrameShape(QtWidgets.QFrame.Box)
        self.screen2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.screen2.setLineWidth(4)
        self.screen2.setText("")
        self.screen2.setAlignment(QtCore.Qt.AlignCenter)
        self.screen2.setObjectName("screen2")
        self.btn_showCamera1 = QtWidgets.QPushButton(self.page_4)
        self.btn_showCamera1.setGeometry(QtCore.QRect(30, 650, 121, 28))
        self.btn_showCamera1.setStyleSheet("background-color: rgb(170, 170, 0);")
        self.btn_showCamera1.setObjectName("btn_showCamera1")
        self.top_bar_2 = QtWidgets.QFrame(self.page_4)
        self.top_bar_2.setGeometry(QtCore.QRect(0, 0, 1881, 40))
        self.top_bar_2.setMaximumSize(QtCore.QSize(16777215, 40))
        self.top_bar_2.setStyleSheet("background-color: rgb(35, 35, 35);")
        self.top_bar_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.top_bar_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.top_bar_2.setObjectName("top_bar_2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.top_bar_2)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setSpacing(0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.toggle_menu_2 = QtWidgets.QFrame(self.top_bar_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toggle_menu_2.sizePolicy().hasHeightForWidth())
        self.toggle_menu_2.setSizePolicy(sizePolicy)
        self.toggle_menu_2.setMaximumSize(QtCore.QSize(40, 40))
        self.toggle_menu_2.setStyleSheet("background-color: rgb(255, 170, 255);")
        self.toggle_menu_2.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.toggle_menu_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.toggle_menu_2.setObjectName("toggle_menu_2")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.toggle_menu_2)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setSpacing(0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.btn_Home_1 = QtWidgets.QPushButton(self.toggle_menu_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_Home_1.sizePolicy().hasHeightForWidth())
        self.btn_Home_1.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.btn_Home_1.setFont(font)
        self.btn_Home_1.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.btn_Home_1.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("home.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_Home_1.setIcon(icon2)
        self.btn_Home_1.setIconSize(QtCore.QSize(40, 40))
        self.btn_Home_1.setFlat(False)
        self.btn_Home_1.setObjectName("btn_Home_1")
        self.verticalLayout_3.addWidget(self.btn_Home_1)
        self.horizontalLayout_3.addWidget(self.toggle_menu_2)
        self.frame_top_3 = QtWidgets.QFrame(self.top_bar_2)
        self.frame_top_3.setMaximumSize(QtCore.QSize(16777215, 40))
        self.frame_top_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_top_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_top_3.setObjectName("frame_top_3")
        self.btn_Exit1 = QtWidgets.QPushButton(self.frame_top_3)
        self.btn_Exit1.setGeometry(QtCore.QRect(1800, 0, 31, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_Exit1.sizePolicy().hasHeightForWidth())
        self.btn_Exit1.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.btn_Exit1.setFont(font)
        self.btn_Exit1.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.btn_Exit1.setText("")
        self.btn_Exit1.setIcon(icon1)
        self.btn_Exit1.setIconSize(QtCore.QSize(40, 40))
        self.btn_Exit1.setFlat(True)
        self.btn_Exit1.setObjectName("btn_Exit1")
        self.btn_browseImage = QtWidgets.QPushButton(self.frame_top_3)
        self.btn_browseImage.setGeometry(QtCore.QRect(10, 0, 121, 31))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.btn_browseImage.setFont(font)
        self.btn_browseImage.setStyleSheet("")
        self.btn_browseImage.setFlat(True)
        self.btn_browseImage.setObjectName("btn_browseImage")
        self.horizontalLayout_3.addWidget(self.frame_top_3)
        self.btn_Save1 = QtWidgets.QPushButton(self.page_4)
        self.btn_Save1.setGeometry(QtCore.QRect(1110, 650, 131, 28))
        self.btn_Save1.setStyleSheet("background-color: rgb(170, 170, 0);")
        self.btn_Save1.setObjectName("btn_Save1")
        self.result1 = QtWidgets.QLabel(self.page_4)
        self.result1.setGeometry(QtCore.QRect(540, 720, 841, 161))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.result1.setFont(font)
        self.result1.setStyleSheet("color: rgb(0, 0, 0);\n"
"background-color: rgb(255, 255, 255);")
        self.result1.setFrameShape(QtWidgets.QFrame.Box)
        self.result1.setFrameShadow(QtWidgets.QFrame.Raised)
        self.result1.setLineWidth(3)
        self.result1.setText("")
        self.result1.setAlignment(QtCore.Qt.AlignCenter)
        self.result1.setObjectName("result1")
        self.label_13 = QtWidgets.QLabel(self.page_4)
        self.label_13.setGeometry(QtCore.QRect(780, 150, 351, 20))
        font = QtGui.QFont()
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_13.setFont(font)
        self.label_13.setStyleSheet("color: rgb(255, 255, 0);")
        self.label_13.setTextFormat(QtCore.Qt.AutoText)
        self.label_13.setAlignment(QtCore.Qt.AlignCenter)
        self.label_13.setObjectName("label_13")
        self.Eagle_label_2 = QtWidgets.QLabel(self.page_4)
        self.Eagle_label_2.setGeometry(QtCore.QRect(730, 70, 451, 51))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.Eagle_label_2.setFont(font)
        self.Eagle_label_2.setFrameShape(QtWidgets.QFrame.Box)
        self.Eagle_label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.Eagle_label_2.setObjectName("Eagle_label_2")
        self.pageswidget.addWidget(self.page_4)
        self.page_9 = QtWidgets.QWidget()
        self.page_9.setObjectName("page_9")
        self.btn_showCamera2 = QtWidgets.QPushButton(self.page_9)
        self.btn_showCamera2.setGeometry(QtCore.QRect(40, 650, 121, 28))
        self.btn_showCamera2.setStyleSheet("background-color: rgb(170, 170, 0);")
        self.btn_showCamera2.setObjectName("btn_showCamera2")
        self.screen1_2 = QtWidgets.QLabel(self.page_9)
        self.screen1_2.setGeometry(QtCore.QRect(40, 180, 891, 441))
        font = QtGui.QFont()
        font.setPointSize(50)
        self.screen1_2.setFont(font)
        self.screen1_2.setFrameShape(QtWidgets.QFrame.Box)
        self.screen1_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.screen1_2.setLineWidth(4)
        self.screen1_2.setText("")
        self.screen1_2.setAlignment(QtCore.Qt.AlignCenter)
        self.screen1_2.setObjectName("screen1_2")
        self.btn_Save2 = QtWidgets.QPushButton(self.page_9)
        self.btn_Save2.setGeometry(QtCore.QRect(1110, 650, 131, 28))
        self.btn_Save2.setStyleSheet("background-color: rgb(170, 170, 0);")
        self.btn_Save2.setObjectName("btn_Save2")
        self.screen2_2 = QtWidgets.QLabel(self.page_9)
        self.screen2_2.setGeometry(QtCore.QRect(970, 180, 881, 441))
        font = QtGui.QFont()
        font.setPointSize(50)
        self.screen2_2.setFont(font)
        self.screen2_2.setFrameShape(QtWidgets.QFrame.Box)
        self.screen2_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.screen2_2.setLineWidth(4)
        self.screen2_2.setText("")
        self.screen2_2.setAlignment(QtCore.Qt.AlignCenter)
        self.screen2_2.setObjectName("screen2_2")
        self.btn_CD2 = QtWidgets.QPushButton(self.page_9)
        self.btn_CD2.setGeometry(QtCore.QRect(970, 650, 131, 28))
        self.btn_CD2.setStyleSheet("background-color: rgb(170, 170, 0);")
        self.btn_CD2.setObjectName("btn_CD2")
        self.top_bar_3 = QtWidgets.QFrame(self.page_9)
        self.top_bar_3.setGeometry(QtCore.QRect(0, 0, 1881, 40))
        self.top_bar_3.setMaximumSize(QtCore.QSize(16777215, 40))
        self.top_bar_3.setStyleSheet("background-color: rgb(35, 35, 35);")
        self.top_bar_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.top_bar_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.top_bar_3.setObjectName("top_bar_3")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.top_bar_3)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setSpacing(0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.toggle_menu_3 = QtWidgets.QFrame(self.top_bar_3)
        self.toggle_menu_3.setMaximumSize(QtCore.QSize(40, 40))
        self.toggle_menu_3.setStyleSheet("background-color: rgb(255, 170, 255);")
        self.toggle_menu_3.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.toggle_menu_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.toggle_menu_3.setObjectName("toggle_menu_3")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.toggle_menu_3)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setSpacing(0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.btn_Home_2 = QtWidgets.QPushButton(self.toggle_menu_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_Home_2.sizePolicy().hasHeightForWidth())
        self.btn_Home_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.btn_Home_2.setFont(font)
        self.btn_Home_2.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.btn_Home_2.setText("")
        self.btn_Home_2.setIcon(icon2)
        self.btn_Home_2.setIconSize(QtCore.QSize(40, 40))
        self.btn_Home_2.setFlat(False)
        self.btn_Home_2.setObjectName("btn_Home_2")
        self.verticalLayout_4.addWidget(self.btn_Home_2)
        self.horizontalLayout_4.addWidget(self.toggle_menu_3)
        self.frame_top_4 = QtWidgets.QFrame(self.top_bar_3)
        self.frame_top_4.setMaximumSize(QtCore.QSize(16777215, 40))
        self.frame_top_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_top_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_top_4.setObjectName("frame_top_4")
        self.btn_Exit2 = QtWidgets.QPushButton(self.frame_top_4)
        self.btn_Exit2.setGeometry(QtCore.QRect(1800, 0, 31, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_Exit2.sizePolicy().hasHeightForWidth())
        self.btn_Exit2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.btn_Exit2.setFont(font)
        self.btn_Exit2.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.btn_Exit2.setText("")
        self.btn_Exit2.setIcon(icon1)
        self.btn_Exit2.setIconSize(QtCore.QSize(40, 40))
        self.btn_Exit2.setFlat(True)
        self.btn_Exit2.setObjectName("btn_Exit2")
        self.btn_browseImage2 = QtWidgets.QPushButton(self.frame_top_4)
        self.btn_browseImage2.setGeometry(QtCore.QRect(10, 0, 121, 31))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.btn_browseImage2.setFont(font)
        self.btn_browseImage2.setStyleSheet("")
        self.btn_browseImage2.setFlat(True)
        self.btn_browseImage2.setObjectName("btn_browseImage2")
        self.horizontalLayout_4.addWidget(self.frame_top_4)
        self.result2 = QtWidgets.QLabel(self.page_9)
        self.result2.setGeometry(QtCore.QRect(560, 730, 841, 161))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.result2.setFont(font)
        self.result2.setStyleSheet("color: rgb(0, 0, 0);\n"
"background-color: rgb(255, 255, 255);")
        self.result2.setFrameShape(QtWidgets.QFrame.Box)
        self.result2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.result2.setLineWidth(3)
        self.result2.setText("")
        self.result2.setAlignment(QtCore.Qt.AlignCenter)
        self.result2.setObjectName("result2")
        self.label_14 = QtWidgets.QLabel(self.page_9)
        self.label_14.setGeometry(QtCore.QRect(770, 140, 351, 20))
        font = QtGui.QFont()
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_14.setFont(font)
        self.label_14.setStyleSheet("color: rgb(255, 255, 0);")
        self.label_14.setAlignment(QtCore.Qt.AlignCenter)
        self.label_14.setObjectName("label_14")
        self.falcon_label_2 = QtWidgets.QLabel(self.page_9)
        self.falcon_label_2.setGeometry(QtCore.QRect(730, 60, 451, 51))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.falcon_label_2.setFont(font)
        self.falcon_label_2.setFrameShape(QtWidgets.QFrame.Box)
        self.falcon_label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.falcon_label_2.setObjectName("falcon_label_2")
        self.pageswidget.addWidget(self.page_9)
        self.page_11 = QtWidgets.QWidget()
        self.page_11.setObjectName("page_11")
        self.top_bar_7 = QtWidgets.QFrame(self.page_11)
        self.top_bar_7.setGeometry(QtCore.QRect(0, 0, 1881, 40))
        self.top_bar_7.setMaximumSize(QtCore.QSize(16777215, 40))
        self.top_bar_7.setStyleSheet("background-color: rgb(35, 35, 35);")
        self.top_bar_7.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.top_bar_7.setFrameShadow(QtWidgets.QFrame.Raised)
        self.top_bar_7.setObjectName("top_bar_7")
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout(self.top_bar_7)
        self.horizontalLayout_9.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_9.setSpacing(0)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.toggle_menu_7 = QtWidgets.QFrame(self.top_bar_7)
        self.toggle_menu_7.setMaximumSize(QtCore.QSize(40, 40))
        self.toggle_menu_7.setStyleSheet("background-color: rgb(255, 170, 255);")
        self.toggle_menu_7.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.toggle_menu_7.setFrameShadow(QtWidgets.QFrame.Raised)
        self.toggle_menu_7.setObjectName("toggle_menu_7")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout(self.toggle_menu_7)
        self.verticalLayout_10.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_10.setSpacing(0)
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.btn_homeBrowse1 = QtWidgets.QPushButton(self.toggle_menu_7)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_homeBrowse1.sizePolicy().hasHeightForWidth())
        self.btn_homeBrowse1.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.btn_homeBrowse1.setFont(font)
        self.btn_homeBrowse1.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.btn_homeBrowse1.setText("")
        self.btn_homeBrowse1.setIcon(icon2)
        self.btn_homeBrowse1.setIconSize(QtCore.QSize(40, 40))
        self.btn_homeBrowse1.setFlat(False)
        self.btn_homeBrowse1.setObjectName("btn_homeBrowse1")
        self.verticalLayout_10.addWidget(self.btn_homeBrowse1)
        self.horizontalLayout_9.addWidget(self.toggle_menu_7)
        self.frame_top_8 = QtWidgets.QFrame(self.top_bar_7)
        self.frame_top_8.setMaximumSize(QtCore.QSize(16777215, 40))
        self.frame_top_8.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_top_8.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_top_8.setObjectName("frame_top_8")
        self.btn_ExitBrowse1 = QtWidgets.QPushButton(self.frame_top_8)
        self.btn_ExitBrowse1.setGeometry(QtCore.QRect(1800, 0, 31, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_ExitBrowse1.sizePolicy().hasHeightForWidth())
        self.btn_ExitBrowse1.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.btn_ExitBrowse1.setFont(font)
        self.btn_ExitBrowse1.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.btn_ExitBrowse1.setText("")
        self.btn_ExitBrowse1.setIcon(icon1)
        self.btn_ExitBrowse1.setIconSize(QtCore.QSize(40, 40))
        self.btn_ExitBrowse1.setFlat(True)
        self.btn_ExitBrowse1.setObjectName("btn_ExitBrowse1")
        self.horizontalLayout_9.addWidget(self.frame_top_8)
        self.resultBrowseImage = QtWidgets.QLabel(self.page_11)
        self.resultBrowseImage.setGeometry(QtCore.QRect(560, 730, 841, 161))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.resultBrowseImage.setFont(font)
        self.resultBrowseImage.setStyleSheet("color: rgb(0, 0, 0);\n"
"background-color: rgb(255, 255, 255);")
        self.resultBrowseImage.setFrameShape(QtWidgets.QFrame.Box)
        self.resultBrowseImage.setFrameShadow(QtWidgets.QFrame.Raised)
        self.resultBrowseImage.setLineWidth(3)
        self.resultBrowseImage.setText("")
        self.resultBrowseImage.setAlignment(QtCore.Qt.AlignCenter)
        self.resultBrowseImage.setObjectName("resultBrowseImage")
        self.btn_browseImg1 = QtWidgets.QPushButton(self.page_11)
        self.btn_browseImg1.setGeometry(QtCore.QRect(40, 650, 121, 28))
        self.btn_browseImg1.setStyleSheet("background-color: rgb(170, 170, 0);")
        self.btn_browseImg1.setObjectName("btn_browseImg1")
        self.screen1_browseImage = QtWidgets.QLabel(self.page_11)
        self.screen1_browseImage.setGeometry(QtCore.QRect(40, 180, 891, 441))
        font = QtGui.QFont()
        font.setPointSize(50)
        self.screen1_browseImage.setFont(font)
        self.screen1_browseImage.setFrameShape(QtWidgets.QFrame.Box)
        self.screen1_browseImage.setFrameShadow(QtWidgets.QFrame.Raised)
        self.screen1_browseImage.setLineWidth(4)
        self.screen1_browseImage.setText("")
        self.screen1_browseImage.setAlignment(QtCore.Qt.AlignCenter)
        self.screen1_browseImage.setObjectName("screen1_browseImage")
        self.btn_BrSave1 = QtWidgets.QPushButton(self.page_11)
        self.btn_BrSave1.setGeometry(QtCore.QRect(1110, 650, 131, 28))
        self.btn_BrSave1.setStyleSheet("background-color: rgb(170, 170, 0);")
        self.btn_BrSave1.setObjectName("btn_BrSave1")
        self.screen2_browseImage = QtWidgets.QLabel(self.page_11)
        self.screen2_browseImage.setGeometry(QtCore.QRect(970, 180, 881, 441))
        font = QtGui.QFont()
        font.setPointSize(50)
        self.screen2_browseImage.setFont(font)
        self.screen2_browseImage.setFrameShape(QtWidgets.QFrame.Box)
        self.screen2_browseImage.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.screen2_browseImage.setLineWidth(4)
        self.screen2_browseImage.setText("")
        self.screen2_browseImage.setAlignment(QtCore.Qt.AlignCenter)
        self.screen2_browseImage.setObjectName("screen2_browseImage")
        self.btn_detect1 = QtWidgets.QPushButton(self.page_11)
        self.btn_detect1.setGeometry(QtCore.QRect(970, 650, 131, 28))
        self.btn_detect1.setStyleSheet("background-color: rgb(170, 170, 0);")
        self.btn_detect1.setObjectName("btn_detect1")
        self.Eagle_label = QtWidgets.QLabel(self.page_11)
        self.Eagle_label.setGeometry(QtCore.QRect(720, 50, 451, 51))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.Eagle_label.setFont(font)
        self.Eagle_label.setFrameShape(QtWidgets.QFrame.Box)
        self.Eagle_label.setAlignment(QtCore.Qt.AlignCenter)
        self.Eagle_label.setObjectName("Eagle_label")
        self.label_12 = QtWidgets.QLabel(self.page_11)
        self.label_12.setGeometry(QtCore.QRect(770, 140, 351, 20))
        font = QtGui.QFont()
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_12.setFont(font)
        self.label_12.setStyleSheet("color: rgb(255, 255, 0);")
        self.label_12.setAlignment(QtCore.Qt.AlignCenter)
        self.label_12.setObjectName("label_12")
        self.pageswidget.addWidget(self.page_11)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.btn_BrSave1_2 = QtWidgets.QPushButton(self.page_2)
        self.btn_BrSave1_2.setGeometry(QtCore.QRect(1070, 630, 131, 28))
        self.btn_BrSave1_2.setStyleSheet("background-color: rgb(170, 170, 0);")
        self.btn_BrSave1_2.setObjectName("btn_BrSave1_2")
        self.resultBrowseImage_2 = QtWidgets.QLabel(self.page_2)
        self.resultBrowseImage_2.setGeometry(QtCore.QRect(510, 700, 841, 161))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.resultBrowseImage_2.setFont(font)
        self.resultBrowseImage_2.setStyleSheet("color: rgb(0, 0, 0);\n"
"background-color: rgb(255, 255, 255);")
        self.resultBrowseImage_2.setFrameShape(QtWidgets.QFrame.Box)
        self.resultBrowseImage_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.resultBrowseImage_2.setLineWidth(3)
        self.resultBrowseImage_2.setText("")
        self.resultBrowseImage_2.setAlignment(QtCore.Qt.AlignCenter)
        self.resultBrowseImage_2.setObjectName("resultBrowseImage_2")
        self.btn_browseImg1_2 = QtWidgets.QPushButton(self.page_2)
        self.btn_browseImg1_2.setGeometry(QtCore.QRect(0, 630, 121, 28))
        self.btn_browseImg1_2.setStyleSheet("background-color: rgb(170, 170, 0);")
        self.btn_browseImg1_2.setObjectName("btn_browseImg1_2")
        self.btn_detect1_2 = QtWidgets.QPushButton(self.page_2)
        self.btn_detect1_2.setGeometry(QtCore.QRect(930, 630, 131, 28))
        self.btn_detect1_2.setStyleSheet("background-color: rgb(170, 170, 0);")
        self.btn_detect1_2.setObjectName("btn_detect1_2")
        self.screen1_browseImage_2 = QtWidgets.QLabel(self.page_2)
        self.screen1_browseImage_2.setGeometry(QtCore.QRect(0, 160, 891, 441))
        font = QtGui.QFont()
        font.setPointSize(50)
        self.screen1_browseImage_2.setFont(font)
        self.screen1_browseImage_2.setFrameShape(QtWidgets.QFrame.Box)
        self.screen1_browseImage_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.screen1_browseImage_2.setLineWidth(4)
        self.screen1_browseImage_2.setText("")
        self.screen1_browseImage_2.setAlignment(QtCore.Qt.AlignCenter)
        self.screen1_browseImage_2.setObjectName("screen1_browseImage_2")
        self.screen2_browseImage_2 = QtWidgets.QLabel(self.page_2)
        self.screen2_browseImage_2.setGeometry(QtCore.QRect(930, 160, 881, 441))
        font = QtGui.QFont()
        font.setPointSize(50)
        self.screen2_browseImage_2.setFont(font)
        self.screen2_browseImage_2.setFrameShape(QtWidgets.QFrame.Box)
        self.screen2_browseImage_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.screen2_browseImage_2.setLineWidth(4)
        self.screen2_browseImage_2.setText("")
        self.screen2_browseImage_2.setAlignment(QtCore.Qt.AlignCenter)
        self.screen2_browseImage_2.setObjectName("screen2_browseImage_2")
        self.falcon_label = QtWidgets.QLabel(self.page_2)
        self.falcon_label.setGeometry(QtCore.QRect(690, 50, 451, 51))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.falcon_label.setFont(font)
        self.falcon_label.setFrameShape(QtWidgets.QFrame.Box)
        self.falcon_label.setAlignment(QtCore.Qt.AlignCenter)
        self.falcon_label.setObjectName("falcon_label")
        self.label_11 = QtWidgets.QLabel(self.page_2)
        self.label_11.setGeometry(QtCore.QRect(740, 130, 351, 20))
        font = QtGui.QFont()
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_11.setFont(font)
        self.label_11.setStyleSheet("color: rgb(255, 255, 0);")
        self.label_11.setAlignment(QtCore.Qt.AlignCenter)
        self.label_11.setObjectName("label_11")
        self.top_bar_8 = QtWidgets.QFrame(self.page_2)
        self.top_bar_8.setGeometry(QtCore.QRect(0, 0, 1881, 40))
        self.top_bar_8.setMaximumSize(QtCore.QSize(16777215, 40))
        self.top_bar_8.setStyleSheet("background-color: rgb(35, 35, 35);")
        self.top_bar_8.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.top_bar_8.setFrameShadow(QtWidgets.QFrame.Raised)
        self.top_bar_8.setObjectName("top_bar_8")
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout(self.top_bar_8)
        self.horizontalLayout_10.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_10.setSpacing(0)
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.toggle_menu_8 = QtWidgets.QFrame(self.top_bar_8)
        self.toggle_menu_8.setMaximumSize(QtCore.QSize(40, 40))
        self.toggle_menu_8.setStyleSheet("background-color: rgb(255, 170, 255);")
        self.toggle_menu_8.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.toggle_menu_8.setFrameShadow(QtWidgets.QFrame.Raised)
        self.toggle_menu_8.setObjectName("toggle_menu_8")
        self.verticalLayout_11 = QtWidgets.QVBoxLayout(self.toggle_menu_8)
        self.verticalLayout_11.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_11.setSpacing(0)
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.btn_homeBrowse1_2 = QtWidgets.QPushButton(self.toggle_menu_8)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_homeBrowse1_2.sizePolicy().hasHeightForWidth())
        self.btn_homeBrowse1_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.btn_homeBrowse1_2.setFont(font)
        self.btn_homeBrowse1_2.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.btn_homeBrowse1_2.setText("")
        self.btn_homeBrowse1_2.setIcon(icon2)
        self.btn_homeBrowse1_2.setIconSize(QtCore.QSize(40, 40))
        self.btn_homeBrowse1_2.setFlat(False)
        self.btn_homeBrowse1_2.setObjectName("btn_homeBrowse1_2")
        self.verticalLayout_11.addWidget(self.btn_homeBrowse1_2)
        self.horizontalLayout_10.addWidget(self.toggle_menu_8)
        self.frame_top_9 = QtWidgets.QFrame(self.top_bar_8)
        self.frame_top_9.setMaximumSize(QtCore.QSize(16777215, 40))
        self.frame_top_9.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_top_9.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_top_9.setObjectName("frame_top_9")
        self.btn_ExitBrowse1_2 = QtWidgets.QPushButton(self.frame_top_9)
        self.btn_ExitBrowse1_2.setGeometry(QtCore.QRect(1800, 0, 31, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_ExitBrowse1_2.sizePolicy().hasHeightForWidth())
        self.btn_ExitBrowse1_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.btn_ExitBrowse1_2.setFont(font)
        self.btn_ExitBrowse1_2.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.btn_ExitBrowse1_2.setText("")
        self.btn_ExitBrowse1_2.setIcon(icon1)
        self.btn_ExitBrowse1_2.setIconSize(QtCore.QSize(40, 40))
        self.btn_ExitBrowse1_2.setFlat(True)
        self.btn_ExitBrowse1_2.setObjectName("btn_ExitBrowse1_2")
        self.horizontalLayout_10.addWidget(self.frame_top_9)
        self.pageswidget.addWidget(self.page_2)
        self.page_12 = QtWidgets.QWidget()
        self.page_12.setObjectName("page_12")
        self.label_21 = QtWidgets.QLabel(self.page_12)
        self.label_21.setGeometry(QtCore.QRect(3, 0, 1851, 951))
        font = QtGui.QFont()
        font.setPointSize(30)
        self.label_21.setFont(font)
        self.label_21.setLineWidth(1)
        self.label_21.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)
        self.label_21.setObjectName("label_21")
        self.label_22 = QtWidgets.QLabel(self.page_12)
        self.label_22.setGeometry(QtCore.QRect(730, 170, 81, 21))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_22.setFont(font)
        self.label_22.setObjectName("label_22")
        self.label_23 = QtWidgets.QLabel(self.page_12)
        self.label_23.setGeometry(QtCore.QRect(730, 210, 61, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_23.setFont(font)
        self.label_23.setObjectName("label_23")
        self.label_24 = QtWidgets.QLabel(self.page_12)
        self.label_24.setGeometry(QtCore.QRect(730, 260, 91, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_24.setFont(font)
        self.label_24.setObjectName("label_24")
        self.lineEdit_usernameR = QtWidgets.QLineEdit(self.page_12)
        self.lineEdit_usernameR.setGeometry(QtCore.QRect(850, 170, 241, 22))
        self.lineEdit_usernameR.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(0, 0, 0);")
        self.lineEdit_usernameR.setObjectName("lineEdit_usernameR")
        self.lineEdit_passwordR = QtWidgets.QLineEdit(self.page_12)
        self.lineEdit_passwordR.setGeometry(QtCore.QRect(850, 210, 241, 22))
        self.lineEdit_passwordR.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(0, 0, 0);")
        self.lineEdit_passwordR.setObjectName("lineEdit_passwordR")
        self.lineEdit_emailR = QtWidgets.QLineEdit(self.page_12)
        self.lineEdit_emailR.setGeometry(QtCore.QRect(850, 260, 241, 22))
        self.lineEdit_emailR.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(0, 0, 0);")
        self.lineEdit_emailR.setObjectName("lineEdit_emailR")
        self.btn_signUpR = QtWidgets.QPushButton(self.page_12)
        self.btn_signUpR.setGeometry(QtCore.QRect(850, 310, 93, 28))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.btn_signUpR.setFont(font)
        self.btn_signUpR.setObjectName("btn_signUpR")
        self.btn_signUptoHomeR = QtWidgets.QPushButton(self.page_12)
        self.btn_signUptoHomeR.setGeometry(QtCore.QRect(1000, 310, 93, 28))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.btn_signUptoHomeR.setFont(font)
        self.btn_signUptoHomeR.setObjectName("btn_signUptoHomeR")
        self.pageswidget.addWidget(self.page_12)
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")
        self.label_25 = QtWidgets.QLabel(self.page)
        self.label_25.setGeometry(QtCore.QRect(0, 0, 1851, 951))
        font = QtGui.QFont()
        font.setPointSize(30)
        self.label_25.setFont(font)
        self.label_25.setLineWidth(1)
        self.label_25.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)
        self.label_25.setObjectName("label_25")
        self.label_26 = QtWidgets.QLabel(self.page)
        self.label_26.setGeometry(QtCore.QRect(520, 80, 801, 61))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.label_26.setFont(font)
        self.label_26.setStyleSheet("color: rgb(255, 255, 0);")
        self.label_26.setAlignment(QtCore.Qt.AlignCenter)
        self.label_26.setObjectName("label_26")
        self.pushButton = QtWidgets.QPushButton(self.page)
        self.pushButton.setGeometry(QtCore.QRect(880, 190, 93, 28))
        self.pushButton.setStyleSheet("background-color: rgb(255, 170, 0);")
        self.pushButton.setObjectName("pushButton")
        self.pageswidget.addWidget(self.page)
        self.verticalLayout_5.addWidget(self.pageswidget)
        self.horizontalLayout.addWidget(self.frame_pages)
        self.verticalLayout.addWidget(self.content_bar)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.pageswidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        ##########Button Function call##########
        self.btn_Signin.clicked.connect(self.loginCheck)
        self.btn_Home_1.clicked.connect(self.scHome)
        self.btn_Home_2.clicked.connect(self.scHome)
        self.btn_homeBrowse1.clicked.connect(self.scHome)
        self.btn_homeBrowse1_2.clicked.connect(self.scHome)
        self.btn_Exit1.clicked.connect(self.logOut)
        self.btn_Exit2.clicked.connect(self.logOut)
        self.btn_ExitBrowse1.clicked.connect(self.logOut)
        self.btn_ExitBrowse1_2.clicked.connect(self.logOut)
        self.pushButton_5.clicked.connect(self.logOut)
        self.btn_Signup.clicked.connect(self.signupSc)
        self.btn_signUptoHomeR.clicked.connect(self.backTohome)
        self.pushButton.clicked.connect(self.scHome)
        self.btn_checkB.clicked.connect(self.chechBox)
        ######### ToolScreen call Function#################
        self.btn_toolE.clicked.connect(self.toolE)
        self.btn_toolF.clicked.connect(self.toolF)

        ######## Main Function calling############
        self.btn_showCamera1.clicked.connect(self.showC1)
        self.btn_showCamera2.clicked.connect(self.showC2)
        self.btn_CD1.clicked.connect(self.captureDetected)
        # self.btn_showCamera2.clicked.connect(self.showC2)
        self.btn_CD2.clicked.connect(self.captureDetected2)
        ###Browse Image###
        self.btn_browseImage.clicked.connect(self.browseSc)
        self.btn_browseImg1.clicked.connect(self.browseImage)
        self.btn_detect1.clicked.connect(self.detectImage)

        self.btn_browseImage2.clicked.connect(self.browseSc2)
        self.btn_browseImg1_2.clicked.connect(self.browseImage2)
        self.btn_detect1_2.clicked.connect(self.detectImage2)
        ##### button save ####
        self.btn_Save1.clicked.connect(self.save_imageCt)
        self.btn_Save2.clicked.connect(self.save_imageCt)
        self.btn_BrSave1.clicked.connect(self.save_imageBr)
        self.btn_BrSave1_2.clicked.connect(self.save_imageBr)
        self.btn_signUpR.clicked.connect(self.signUpInsert)
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "ToolKit Parts Detection"))
        self.label_2.setText(_translate("MainWindow", "Designed & Developed by Duong Minh Tien"))
        self.label_3.setText(_translate("MainWindow", "Username"))
        self.label_4.setText(_translate("MainWindow", "Password"))
        self.label_5.setText(_translate("MainWindow", "Login  "))
        self.btn_Signin.setText(_translate("MainWindow", "Sign in"))
        self.btn_Signup.setText(_translate("MainWindow", "Sign up"))
        self.btn_checkB.setText(_translate("MainWindow", "Show Password"))
        self.label_6.setText(_translate("MainWindow", "Welcome!"))
        self.label_7.setText(_translate("MainWindow", "Feel free to use and enjoy your work "))
        self.label_8.setText(_translate("MainWindow", "Please choose specific took kits which you want to detect and classify:"))
        self.btn_toolE.setText(_translate("MainWindow", "Tool Eagle"))
        self.btn_toolF.setText(_translate("MainWindow", "Tool Falcon"))
        self.label_10.setText(_translate("MainWindow", "Tool kit parts dection and classification process flow"))
        self.btn_CD1.setText(_translate("MainWindow", "Capture and Detect"))
        self.btn_showCamera1.setText(_translate("MainWindow", "Show Camera"))
        self.btn_browseImage.setText(_translate("MainWindow", "Browse Image"))
        self.btn_Save1.setText(_translate("MainWindow", "Save"))
        self.label_13.setText(_translate("MainWindow", "Scisor E, Spanner E, Plier E, Screwdriver E"))
        self.Eagle_label_2.setText(_translate("MainWindow", "TOOL Eagle"))
        self.btn_showCamera2.setText(_translate("MainWindow", "Show Camera"))
        self.btn_Save2.setText(_translate("MainWindow", "Save"))
        self.btn_CD2.setText(_translate("MainWindow", "Capture and Detect"))
        self.btn_browseImage2.setText(_translate("MainWindow", "Browse Image"))
        self.label_14.setText(_translate("MainWindow", "Wrench F, Pappercutter F, Tape F, Plasticgun F"))
        self.falcon_label_2.setText(_translate("MainWindow", "TOOL Falcon"))
        self.btn_browseImg1.setText(_translate("MainWindow", "Browse Image"))
        self.btn_BrSave1.setText(_translate("MainWindow", "Save"))
        self.btn_detect1.setText(_translate("MainWindow", "Detect"))
        self.Eagle_label.setText(_translate("MainWindow", "TOOL Eagle"))
        self.label_12.setText(_translate("MainWindow", "Scisor E, Spanner E, Plier E, Screwdriver E"))
        self.btn_BrSave1_2.setText(_translate("MainWindow", "Save"))
        self.btn_browseImg1_2.setText(_translate("MainWindow", "Browse Image"))
        self.btn_detect1_2.setText(_translate("MainWindow", "Detect"))
        self.falcon_label.setText(_translate("MainWindow", "TOOL Falcon"))
        self.label_11.setText(_translate("MainWindow", "Wrench F, Pappercutter F, Tape F, Plasticgun F"))
        self.label_21.setText(_translate("MainWindow", "Sig Up Form"))
        self.label_22.setText(_translate("MainWindow", "Username"))
        self.label_23.setText(_translate("MainWindow", "Password"))
        self.label_24.setText(_translate("MainWindow", "Email address"))
        self.btn_signUpR.setText(_translate("MainWindow", "Sign up"))
        self.btn_signUptoHomeR.setText(_translate("MainWindow", "Back to Home"))
        self.label_25.setText(_translate("MainWindow", "Your account successfully created !! "))
        self.label_26.setText(_translate("MainWindow", "Congratulations!. It\'s time to log in and do your work "))
        self.pushButton.setText(_translate("MainWindow", "Log In"))
    def messageBox(self, title, message):
            msgBox = QMessageBox()
            msgBox.setIcon(QMessageBox.Warning)
            msgBox.setWindowTitle(title)
            msgBox.setText(message)
            msgBox.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
            msgBox.exec_()
    def successSaveMessage(self, title, message):
            ngBox = QMessageBox()
            ngBox.setIcon(QMessageBox.NoIcon)
            ngBox.setWindowTitle(title)
            ngBox.setText(message)
            ngBox.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
            ngBox.exec_()
    def loginCheck(self):
            USERNAME = self.uname_lineEdit.text()
            PASSWORD = self.pass_lineEdit.text()  # take the value from input lines
            conn = sqlite3.connect("login.db")  # connecting database
            result = conn.execute("SELECT * FROM LOGIN WHERE username = ? AND password = ?", (USERNAME, PASSWORD))
            if (len(result.fetchall()) > 0):
                    # call function contained pages/mainwindow
                    self.pageswidget.setCurrentWidget(self.page_3)
            else:
                    self.messageBox('Warning', 'Invalid username and password login again')

                    # Message box show errors pls login again
            conn.close()

    def chechBox(self):
            if self.btn_checkB.isChecked():
                    self.pass_lineEdit.setEchoMode(QtWidgets.QLineEdit.Normal)
            else:
                    self.pass_lineEdit.setEchoMode(QtWidgets.QLineEdit.Password)
    def scHome(self):
            self.pageswidget.setCurrentWidget(self.page_3)
    def logOut(self):
            self.pageswidget.setCurrentWidget(self.page_1)
            self.uname_lineEdit.clear()
            self.pass_lineEdit.clear()

    def toolE(self):
            self.pageswidget.setCurrentWidget(self.page_4)
    def toolF(self):
            self.pageswidget.setCurrentWidget(self.page_9)
    def browseSc(self):
            self.pageswidget.setCurrentWidget(self.page_11)
    def browseSc2(self):
            self.pageswidget.setCurrentWidget(self.page_2)
    def signupSc(self):
            self.pageswidget.setCurrentWidget(self.page_12)
            self.lineEdit_usernameR.clear()
            self.lineEdit_passwordR.clear()
            self.lineEdit_emailR.clear()
    def backTohome(self):
            self.pageswidget.setCurrentWidget(self.page_1)
            self.uname_lineEdit.clear()
            self.pass_lineEdit.clear()
    def showC1(self):
            global cap
            cap = cv2.VideoCapture(0)
            while True:
                    _, img = cap.read()
                    self.showCamera(img)
                    cv2.waitKey(1)
            cap.release()
            cv2.destroyAllWindows()
    ####### image processing ######
    def showCamera(self, img):
        qformat = QImage.Format_Indexed8
        if len(img.shape) == 3:
            if (img.shape[2]) == 4:
                qformat = QImage.Format_RGB888

            else:
                qformat = QImage.Format_RGB888
        img = QImage(img, img.shape[1], img.shape[0], qformat)
        img = img.rgbSwapped()
        self.screen1.setPixmap(QPixmap.fromImage(img))
        self.screen1.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
        ##self.screen1.setScaledContents(True);
    def captureDetected(self, img):
        global svImageCt
        _, img = cap.read()

         #cv2.imshow('Image', img)
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        #_, img = cap.read()
        height, width, _ = img.shape
        blob = cv2.dnn.blobFromImage(img, 1 / 255, (416, 416), (0, 0, 0), swapRB=True, crop=False)
        net.setInput(blob)  # set the input blob image into the network
        output_layers_names = net.getUnconnectedOutLayersNames()  # to get output layers names
        layerOutputs = net.forward(output_layers_names)  # pass layers names into forward function to get output layers from net

        # create the boxes list to extract the bouding boxes
        boxes = []
        confidences = []  # to store the confidence
        class_ids = []  # store the classes id which represents predicted classes
        eagle = [4, 5, 6, 7]
        falcon = [0, 1, 2, 3]
        # we need to create 2 for loops that help us to loop over the latest output
        # the first for loop to extract all the information from the layers output and
        # the second for loop to extract the information from each of the output
        for output in layerOutputs:
            for detection in output:
                scores = detection[5:]  # all active classes predictions
                class_id = np.argmax(scores)  # find location and to extract the highest scores location
                confidence = scores[class_id]  # to identify the maximum value from this class probabilities
                if confidence > 0.5:  # confidence > certain threshold start to locate bounding boxes
                    center_x = int(detection[0] * width)
                    center_y = int(detection[1] * height)
                    w = int(detection[2] * width)
                    h = int(detection[3] * height)

                    x = int(center_x - w / 2)
                    y = int(center_y - h / 2)

                    boxes.append([x, y, w, h])
                    confidences.append(float(confidence))
                    class_ids.append(class_id)
                    print(class_ids)
        for k in falcon:
                if k in class_ids:
                        self.result1.setText('no matching')
                        break
                else:
                        self.result1.setText('matching')
        # print(len(boxes))
        indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)
        # print(indexes.flatten())
        font = cv2.FONT_HERSHEY_PLAIN
        colors = np.random.uniform(0, 255, size=(len(boxes), 3))

        # identify each of the objects detected
        if len(indexes) > 0:
            for i in indexes.flatten():
                x, y, w, h = boxes[i]  # extract the info back from the boxes contains location & the size of rectangle we need to show in pic
                label = str(classes[class_ids[i]])  # extract back the classes id(numbers) using str --> labels(names)
                confidence = str(round(confidences[i], 2))  # //
                color = colors[i]  # pick colors for each object
                cv2.rectangle(img, (x, y), (x + w, y + h), color, 2)
                cv2.putText(img, label + " " + confidence, (x, y + 20), font, 2, (255, 255, 255), 2)
                svImageCt = img
                frame = qimage2ndarray.array2qimage(img)

            self.screen2.setPixmap(QPixmap.fromImage(frame))
            self.screen2.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
            ##self.screen2.setScaledContents(True);

            cv2.waitKey(0)
    cv2.destroyAllWindows()
    ###Tool Falcon##########
    def showC2(self):
            global cap
            cap = cv2.VideoCapture(0)
            while True:
                    _, img = cap.read()
                    self.showCamera2(img)
                    cv2.waitKey(1)
            cap.release()
            cv2.destroyAllWindows()
    ####### image processing ######
    def showCamera2(self, img):
        qformat = QImage.Format_Indexed8
        if len(img.shape) == 3:
            if (img.shape[2]) == 4:
                qformat = QImage.Format_RGB888

            else:
                qformat = QImage.Format_RGB888
        img = QImage(img, img.shape[1], img.shape[0], qformat)
        img = img.rgbSwapped()
        self.screen1_2.setPixmap(QPixmap.fromImage(img))
        self.screen1_2.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
    def captureDetected2(self, img):
        global svImageCt

        _, img = cap.read()

         #cv2.imshow('Image', img)
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        #_, img = cap.read()
        height, width, _ = img.shape
        blob = cv2.dnn.blobFromImage(img, 1 / 255, (416, 416), (0, 0, 0), swapRB=True, crop=False)
        net.setInput(blob)  # set the input blob image into the network
        output_layers_names = net.getUnconnectedOutLayersNames()  # to get output layers names
        layerOutputs = net.forward(output_layers_names)  # pass layers names into forward function to get output layers from net

        # create the boxes list to extract the bouding boxes
        boxes = []
        confidences = []  # to store the confidence
        class_ids = []  # store the classes id which represents predicted classes
        eagle = [4, 5, 6, 7]
        falcon = [0, 1, 2, 3]
        # we need to create 2 for loops that help us to loop over the latest output
        # the first for loop to extract all the information from the layers output and
        # the second for loop to extract the information from each of the output
        for output in layerOutputs:
            for detection in output:
                scores = detection[5:]  # all active classes predictions
                class_id = np.argmax(scores)  # find location and to extract the highest scores location
                confidence = scores[class_id]  # to identify the maximum value from this class probabilities
                if confidence > 0.5:  # confidence > certain threshold start to locate bounding boxes
                    center_x = int(detection[0] * width)
                    center_y = int(detection[1] * height)
                    w = int(detection[2] * width)
                    h = int(detection[3] * height)

                    x = int(center_x - w / 2)
                    y = int(center_y - h / 2)

                    boxes.append([x, y, w, h])
                    confidences.append(float(confidence))
                    class_ids.append(class_id)
                    print(class_ids)
        for k in eagle:
                if k in class_ids:
                        self.result2.setText('no matching')
                        break
                else:
                        self.result2.setText('matching')
        # print(len(boxes))
        indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)
        # print(indexes.flatten())
        font = cv2.FONT_HERSHEY_PLAIN
        colors = np.random.uniform(0, 255, size=(len(boxes), 3))

        # identify each of the objects detected
        if len(indexes) > 0:
            for i in indexes.flatten():
                x, y, w, h = boxes[i]  # extract the info back from the boxes contains location & the size of rectangle we need to show in pic
                label = str(classes[class_ids[i]])  # extract back the classes id(numbers) using str --> labels(names)
                confidence = str(round(confidences[i], 2))  # //
                color = colors[i]  # pick colors for each object
                cv2.rectangle(img, (x, y), (x + w, y + h), color, 2)
                cv2.putText(img, label + " " + confidence, (x, y + 20), font, 2, (255, 255, 255), 2)
                svImageCt = img
                frame = qimage2ndarray.array2qimage(img)

            self.screen2_2.setPixmap(QPixmap.fromImage(frame))
            self.screen2_2.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
            cv2.waitKey(0)
    cv2.destroyAllWindows()
    ############ Browse and Save Image #################


    def browseImage(self):
            global imagePath
            fname = QFileDialog.getOpenFileName()
            imagePath = fname[0]
            # Cname = QFileDialog.getOpenFileName()
            brImage = QPixmap(imagePath)
            self.screen1_browseImage.setPixmap(brImage)
            ##self.screen1_browseImage.setScaledContents(True);


    def detectImage(self):
            global svImage
            # fname=QFileDialog.getOpenFileName()
            img = cv2.imread(imagePath)
            #cv2.imshow('sss', s)
            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            # _, img = cap.read()
            height, width, _ = img.shape
            blob = cv2.dnn.blobFromImage(img, 1 / 255, (416, 416), (0, 0, 0), swapRB=True, crop=False)
            net.setInput(blob)  # set the input blob image into the network
            output_layers_names = net.getUnconnectedOutLayersNames()  # to get output layers names
            layerOutputs = net.forward(output_layers_names)  # pass layers names into forward function to get output layers from net
            # create the boxes list to extract the bouding boxes
            boxes = []
            confidences = []  # to store the confidence
            class_ids = []  # store the classes id which represents predicted classes
            eagle = [0, 1, 3, 5, 8]
            falcon = [2, 4, 6, 7, 9]
            nmat = [0, 2, 1, 4, 3, 6, 5, 7, 8, 9]
            # we need to create 2 for loops that help us to loop over the latest output
            # the first for loop to extract all the information from the layers output and
            # the second for loop to extract the information from each of the output
            for output in layerOutputs:
                    for detection in output:
                            scores = detection[5:]  # all active classes predictions
                            class_id = np.argmax(scores)  # find location and to extract the highest scores location
                            confidence = scores[class_id]  # to identify the maximum value from this class probabilities
                            if confidence > 0.5:  # confidence > certain threshold start to locate bounding boxes
                                    center_x = int(detection[0] * width)
                                    center_y = int(detection[1] * height)
                                    w = int(detection[2] * width)
                                    h = int(detection[3] * height)

                                    x = int(center_x - w / 2)
                                    y = int(center_y - h / 2)

                                    boxes.append([x, y, w, h])
                                    confidences.append(float(confidence))
                                    class_ids.append(class_id)
            # print(len(boxes))
            indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)
            # print(indexes.flatten())
            font = cv2.FONT_HERSHEY_PLAIN
            colors = np.random.uniform(0, 255, size=(len(boxes), 3))

            # identify each of the objects detected
            if len(indexes) > 0:
                    for i in indexes.flatten():
                            x, y, w, h = boxes[i]  # extract the info back from the boxes contains location & the size of rectangle we need to show in pic
                            label = str(classes[class_ids[i]])  # extract back the classes id(numbers) using str --> labels(names)
                            print(class_ids)
                            confidence = str(round(confidences[i], 2))  # //
                            color = colors[i]  # pick colors for each object
                            cv2.rectangle(img, (x, y), (x + w, y + h), color, 2)
                            cv2.putText(img, label + " " + confidence, (x, y + 20), font, 2, (45, 45, 45), 2)
                            svImage = img
                            frame = qimage2ndarray.array2qimage(img)

                    self.screen2_browseImage.setPixmap(QPixmap.fromImage(frame))
                    self.screen2_browseImage.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
                    ##self.screen2_browseImage.setScaledContents(True);
                   ## self.resultBrowseImage.setText(classes)
                    for j in indexes.flatten():
                            if class_ids[j] in eagle[0:4]:
                                    self.resultBrowseImage.setText('matching')
                            elif class_ids[j] in falcon[0:4]:
                                    self.resultBrowseImage.setText('matching')
                            else:
                                    self.resultBrowseImage.setText('no matching')

                    cv2.waitKey(0)


    cv2.destroyAllWindows()

    ########################### Browse Image Tool Falcon ##############
    def browseImage2(self):
            global imagePath
            fname = QFileDialog.getOpenFileName()
            imagePath = fname[0]
            # Cname = QFileDialog.getOpenFileName()
            brImage = QPixmap(imagePath)
            self.screen1_browseImage_2.setPixmap(brImage)
            self.screen1_browseImage_2.setScaledContents(True);


    def detectImage2(self):
            global svImage
            # fname=QFileDialog.getOpenFileName()
            img = cv2.imread(imagePath)
            #cv2.imshow('sss', s)
            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            # _, img = cap.read()
            height, width, _ = img.shape
            blob = cv2.dnn.blobFromImage(img, 1 / 255, (416, 416), (0, 0, 0), swapRB=True, crop=False)
            net.setInput(blob)  # set the input blob image into the network
            output_layers_names = net.getUnconnectedOutLayersNames()  # to get output layers names
            layerOutputs = net.forward(output_layers_names)  # pass layers names into forward function to get output layers from net
            # create the boxes list to extract the bouding boxes
            boxes = []
            confidences = []  # to store the confidence
            class_ids = []  # store the classes id which represents predicted classes
            eagle = [0, 1, 3, 5, 8]
            falcon = [2, 4, 6, 7, 9]
            nmat = [0, 2, 1, 4, 3, 6, 5, 7, 8, 9]
            # we need to create 2 for loops that help us to loop over the latest output
            # the first for loop to extract all the information from the layers output and
            # the second for loop to extract the information from each of the output
            for output in layerOutputs:
                    for detection in output:
                            scores = detection[5:]  # all active classes predictions
                            class_id = np.argmax(scores)  # find location and to extract the highest scores location
                            confidence = scores[class_id]  # to identify the maximum value from this class probabilities
                            if confidence > 0.5:  # confidence > certain threshold start to locate bounding boxes
                                    center_x = int(detection[0] * width)
                                    center_y = int(detection[1] * height)
                                    w = int(detection[2] * width)
                                    h = int(detection[3] * height)

                                    x = int(center_x - w / 2)
                                    y = int(center_y - h / 2)

                                    boxes.append([x, y, w, h])
                                    confidences.append(float(confidence))
                                    class_ids.append(class_id)
            # print(len(boxes))
            indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)
            # print(indexes.flatten())
            font = cv2.FONT_HERSHEY_PLAIN
            colors = np.random.uniform(0, 255, size=(len(boxes), 3))

            # identify each of the objects detected
            if len(indexes) > 0:
                    for i in indexes.flatten():
                            x, y, w, h = boxes[i]  # extract the info back from the boxes contains location & the size of rectangle we need to show in pic
                            label = str(classes[class_ids[i]])  # extract back the classes id(numbers) using str --> labels(names)
                            print(class_ids)
                            confidence = str(round(confidences[i], 2))  # //
                            color = colors[i]  # pick colors for each object
                            cv2.rectangle(img, (x, y), (x + w, y + h), color, 2)
                            cv2.putText(img, label + " " + confidence, (x, y + 20), font, 2, (45, 45, 45), 2)
                            svImage = img
                            frame = qimage2ndarray.array2qimage(img)

                    self.screen2_browseImage_2.setPixmap(QPixmap.fromImage(frame))
                    self.screen2_browseImage_2.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
                    self.screen2_browseImage_2.setScaledContents(True);
                   ## self.resultBrowseImage.setText(classes)
                    for j in indexes.flatten():
                            if class_ids[j] in eagle[0:4]:
                                    self.resultBrowseImage_2.setText('matching')
                            elif class_ids[j] in falcon[0:4]:
                                    self.resultBrowseImage_2.setText('matching')
                            else:
                                    self.resultBrowseImage_2.setText('no matching')

                    cv2.waitKey(0)


    cv2.destroyAllWindows()
    ########## Save Function ##################
    def save_imageCt(self):
            hdImageCt = cv2.cvtColor(svImageCt, cv2.COLOR_BGR2RGB)
            d = random.randint(0, 100000000000)
            path = 'D:/Programs/Pic'
            cv2.imwrite(os.path.join(path, 'naaa_%d.jpg' % d), hdImageCt)
            self.successSaveMessage('Congrats!!', 'Your detected image was saved')
    def save_imageBr(self):
            hdImage = cv2.cvtColor(svImage, cv2.COLOR_BGR2RGB)
            d = random.randint(0, 100000000000)
            path = 'D:/Programs/Pic'
            cv2.imwrite(os.path.join(path, 'naaa_%d.jpg' % d), hdImage)
            self.successSaveMessage('Congrats!!', 'Your detected image was saved')
    def signUpInsert(self):
            USERNAME = self.lineEdit_usernameR.text()
            PASSWORD = self.lineEdit_passwordR.text()
            EMAIL = self.lineEdit_emailR.text()
            conn = sqlite3.connect("login.db")
            conn.execute('''INSERT INTO LOGIN( username, password, email) VALUES(?,?,?)''', (USERNAME, PASSWORD, EMAIL))
            conn.commit()
            self.pageswidget.setCurrentWidget(self.page)
            conn.close()

import source
if __name__ == '__main__':
    import os
    import sys
    import random
    net = cv2.dnn.readNet('yolov3_training_last_V5.weights', 'yolov3_testing_V5.cfg')
    classes = []
    with open('classes_V5.txt', 'r') as f:
            classes = f.read().splitlines()
            print(classes)
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())